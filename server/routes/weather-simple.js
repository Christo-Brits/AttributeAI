const express = require('express');
const fs = require('fs');
const path = require('path');
const router = express.Router();

// Path where n8n will write processed data files
const WEATHER_DATA_DIR = path.join(__dirname, '../../weather-data');

// Ensure weather data directory exists
if (!fs.existsSync(WEATHER_DATA_DIR)) {
  fs.mkdirSync(WEATHER_DATA_DIR, { recursive: true });
  
  // Create sample data files for development
  const sampleDashboard = {
    current: {
      temperature: 72,
      condition: 'Partly Cloudy',
      icon: 'â›…'
    },
    recommendation: {
      change: 15,
      reason: 'Favorable weather conditions expected to increase engagement',
      confidence: 87
    },
    alerts: [
      {
        type: 'opportunity',
        icon: 'ðŸŽ¯',
        message: 'Hot weather forecast - consider increasing cooling product ads'
      }
    ],
    timestamp: new Date().toISOString()
  };
  
  fs.writeFileSync(
    path.join(WEATHER_DATA_DIR, 'dashboard.json'), 
    JSON.stringify(sampleDashboard, null, 2)
  );
}

// Dashboard data - main widget information
router.get('/dashboard', (req, res) => {
  try {
    const dashboardPath = path.join(WEATHER_DATA_DIR, 'dashboard.json');
    
    if (fs.existsSync(dashboardPath)) {
      const data = fs.readFileSync(dashboardPath, 'utf8');
      const weatherData = JSON.parse(data);
      
      // Add freshness check
      const lastUpdated = new Date(weatherData.timestamp);
      const now = new Date();
      const hoursOld = (now - lastUpdated) / (1000 * 60 * 60);
      
      if (hoursOld > 2) {
        weatherData.stale = true;
      }
      
      res.json(weatherData);
    } else {
      res.status(404).json({ error: 'Weather data not available' });
    }
  } catch (error) {
    console.error('Weather dashboard error:', error);
    res.status(500).json({ error: 'Failed to load weather data' });
  }
});

// Detailed insights - for expanded views
router.get('/insights', (req, res) => {
  try {
    const insightsPath = path.join(WEATHER_DATA_DIR, 'insights.json');
    
    if (fs.existsSync(insightsPath)) {
      const data = fs.readFileSync(insightsPath, 'utf8');
      res.json(JSON.parse(data));
    } else {
      res.json({
        correlations: {},
        recommendations: [],
        trends: [],
        message: 'Insights being generated by n8n workflows'
      });
    }
  } catch (error) {
    console.error('Weather insights error:', error);
    res.status(500).json({ error: 'Failed to load insights' });
  }
});

// Alerts - urgent recommendations
router.get('/alerts', (req, res) => {
  try {
    const alertsPath = path.join(WEATHER_DATA_DIR, 'alerts.json');
    
    if (fs.existsSync(alertsPath)) {
      const data = fs.readFileSync(alertsPath, 'utf8');
      res.json(JSON.parse(data));
    } else {
      res.json({
        alerts: [],
        lastChecked: new Date().toISOString()
      });
    }
  } catch (error) {
    console.error('Weather alerts error:', error);
    res.status(500).json({ error: 'Failed to load alerts' });
  }
});

// Health check - verify n8n data pipeline
router.get('/health', (req, res) => {
  const files = ['dashboard.json', 'insights.json', 'alerts.json'];
  const status = {};
  
  files.forEach(file => {
    const filePath = path.join(WEATHER_DATA_DIR, file);
    status[file] = {
      exists: fs.existsSync(filePath),
      lastModified: fs.existsSync(filePath) 
        ? fs.statSync(filePath).mtime.toISOString()
        : null
    };
  });
  
  res.json({
    status: 'ok',
    dataDirectory: WEATHER_DATA_DIR,
    files: status,
    n8nConnected: Object.values(status).some(s => s.exists)
  });
});

module.exports = router;